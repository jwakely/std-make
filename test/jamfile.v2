# Copyright Vicente J. Botet Escriba 2014.

# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import testing ;
  
if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

if ! $(STD_OPTIONAL)
{
    STD_OPTIONAL = [ modules.peek : STD_OPTIONAL ] ;
}

if ! $(BOOST_EXPECTED)
{
    BOOST_EXPECTED = [ modules.peek : BOOST_EXPECTED ] ;
}

project std_make
    : requirements
      <include>. # .cpp files in expected/test.
      <include>../include/ # make .hpp files.    
      <include>$(BOOST_ROOT) # boost .hpp files.    
      <include>$(STD_OPTIONAL) # optional.hpp file.    
      <include>$(BOOST_EXPECTED)/include # expected .hpp files.    
      <cxxflags>-DSTDEF_VERSION=2
    ;


test-suite general
    : 
      [ run make/make_pass.cpp  ]
    ;

test-suite boost_optional
    : 
      [ run make/make_boost_optional_pass.cpp  ]
    ;

explicit boost_expected ;
test-suite boost_expected
    : 
      [ run make/make_boost_expected_pass.cpp  ]
    ;

test-suite std_array
    : 
      [ run make/make_std_array_pass.cpp  ]
    ;

test-suite std_optional
    : 
      [ run make/make_std_optional_pass.cpp  ]
    ;

test-suite stdex_expected
    : 
      [ run expected2/trivial_unexpected_pass.cpp  ]
      [ run expected2/trivial_expected_pass.cpp  ]
    ;

test-suite std_result
    : 
      [ run result/success_failure_pass.cpp  ]
      [ run result/trivial_result_pass.cpp  ]
    ;

test-suite std_expected
    : 
      [ run make/make_std_expected_pass.cpp  ]
    ;

test-suite make_ready_future
    : 
      [ run make/make_ready_future_pass.cpp  ]
      [ compile-fail make/make_ready_future_ref_lit_fail.cpp  ]
      [ compile-fail make/make_ready_future_ref_lvalue_fail.cpp  ]
      [ compile-fail make/make_ready_future_value_lvalue_fail.cpp  ]
    ;

test-suite emplace_ready_future
    : 
      [ run make/emplace_ready_future_pass.cpp  ]
      [ compile-fail make/emplace_ready_future_ref_lit_fail.cpp  ]
      [ compile-fail make/emplace_ready_future_ref_void_fail.cpp  ]
    ;

test-suite std_future
    : 
      [ run make/make_std_future_pass.cpp  ]
      [ run make/make_std_shared_future_pass.cpp  ]
    ;

explicit std_unique_ptr ;
test-suite std_unique_ptr
    : 
      [ run make/make_std_unique_ptr_pass.cpp  ]
    ;

explicit std_shared_ptr ;
test-suite std_shared_ptr
    : 
      [ run make/make_std_shared_ptr_pass.cpp  ]
    ;

test-suite observer_ptr
    : 
      [ run observer_ptr/observer_ptr_pass.cpp  ]
    ;

test-suite polymorphic_value
    : 
      [ run polymorphic_value/polymorphic_value_pass.cpp  ]
    ;

test-suite status_value
    : 
      [ run status_value/status_value_pass.cpp  ]
    ;

test-suite flat_map
    : 
      [ run flat_map/flat_map_pass.cpp  ]
    ;

test-suite static_vector
    : 
      [ run static_vector/static_vector_pass.cpp  ]
    ;

test-suite std_pair
    : 
      [ run make/make_std_pair_pass.cpp  ]
    ;

test-suite std_tuple
    : 
      [ run make/make_std_tuple_pass.cpp  ]
    ;

test-suite signature
    : 
      #[ run make/signature_pass.cpp  ]
    ;

test-suite callable_wrapper
    : 
      [ run callable_wrapper/ex_pass.cpp  ]
    ;

test-suite stde_expected
    : 
      [ compile-fail expected/expected_no_move_constructible_fail.cpp  ]
      [ run expected/expected_pass.cpp  ]
      [ run expected/unexpected_pass.cpp  ]
    ;

explicit possibly_valued ;
test-suite possibly_valued
    : 
      [ run possibly_valued/possibly_valued_pass.cpp  ]
      [ run possibly_valued/possibly_valued_std_optional_pass.cpp  ]
      #[ run possibly_valued/possibly_valued_std_unique_ptr_pass.cpp  ]
      #[ run possibly_valued/possibly_valued_std_shared_ptr_pass.cpp  ]

    ;

#explicit value_or_error ;
test-suite value_or_error
    : 
      [ run value_or_error/value_or_error_pass.cpp  ]
      [ run value_or_error/value_or_error_stde_expected_pass.cpp  ]
      #[ run value_or_error/value_or_error_std_optional_pass.cpp  ]
      #[ run value_or_error/value_or_error_std_unique_ptr_pass.cpp  ]
      #[ run value_or_error/value_or_error_std_shared_ptr_pass.cpp  ]

    ;

test-suite nullable
    : 
      [ run nullable/nullable_pass.cpp  ]
      [ run nullable/nullable_std_optional_pass.cpp  ]
      [ run nullable/nullable_std_unique_ptr_pass.cpp  ]
      [ run nullable/nullable_std_shared_ptr_pass.cpp  ]

    ;

test-suite value_or_none
    : 
      [ run value_or_none/value_or_none_pass.cpp  ]
      [ run value_or_none/value_or_none_std_optional_pass.cpp  ]
      #[ run value_or_none/value_or_none_std_unique_ptr_pass.cpp  ]
      #[ run value_or_none/value_or_none_std_shared_ptr_pass.cpp  ]

    ;

test-suite ordinal
    : 
      [ run ordinal/ordinal_pass.cpp  ]
    ;

test-suite ordinal_array
    : 
      [ run ordinal/container/ordinal_array/ordinal_array_pass.cpp  ]
    ;

test-suite ordinal_set
    : 
      [ run ordinal/container/ordinal_set/ordinal_set_pass.cpp  ]
    ;

test-suite ordinal_range
    : 
      [ run ordinal/container/ordinal_range/ordinal_range_pass.cpp  ]
    ;

test-suite ordinal_ordered_set
    : 
      [ run ordinal/container/ordinal_ordered_set/ordinal_ordered_set_pass.cpp  ]
    ;

test-suite ordinal_ordered_map
    : 
      [ run ordinal/container/ordinal_ordered_map/ordinal_ordered_map_pass.cpp  ]
    ;

test-suite bits
    : 
      [ run ../example/bits/bit.cpp  ]
      [ run bits/bit_pass.cpp  ]
      [ run bits/bit_mask_pass.cpp  ]
    ;

test-suite subwords
    : 
      [ run ../example/subword/subword.cpp  ]
      #[ run subword/subword_pass.cpp  ]
    ;

test-suite product_type
    : 
      [ run product_type/struct_pass.cpp  ]
      [ run product_type/c_array_pass.cpp  ]
      [ run product_type/std_pair_pass.cpp  ]
      [ run product_type/std_tuple_pass.cpp  ]
      [ run product_type/std_array_pass.cpp  ]
    ;

test-suite sum_type
    : 
      [ run sum_type/sum_type_pass.cpp  ]
      [ run sum_type/sum_type_std_optional_pass.cpp  ]
      [ run sum_type/sum_type_std_expected_pass.cpp  ]
    ;

test-suite swappable
    : 
      [ run swappable/swap_c_array_pass.cpp  ]
    ;

test-suite range
    : 
      [ run range/range_c_array_pass.cpp  ]
      [ run range/range_std_array_pass.cpp  ]
    ;



test-suite functional
    : 
      [ run functional/overload_pass.cpp  ]
    ;

test-suite functor
    : 
      [ run functor/functor_pass.cpp  ]
      [ run functor/functor_std_optional_pass.cpp  ]
      [ run functor/functor_std_expected_pass.cpp  ]
      #[ run functor/functor_std_pair_pass.cpp  ]
      #[ run functor/functor_std_tuple_pass.cpp  ]
      [ run functor/functor_std_array_pass.cpp  ]
      #[ run functor/functor_std_unique_ptr_pass.cpp  ]
      #[ run functor/functor_std_shared_ptr_pass.cpp  ]
    ;

test-suite n_functor
    : 
      #[ run n_functor/n_functor_pass.cpp  ]
      [ run n_functor/n_functor_std_pair_pass.cpp  ]
      [ run n_functor/n_functor_std_tuple_pass.cpp  ]
    ;

test-suite p_functor
    : 
      #[ run p_functor/p_functor_pass.cpp  ]
      [ run p_functor/p_functor_std_pair_pass.cpp  ]
      [ run p_functor/p_functor_std_tuple_pass.cpp  ]
    ;


test-suite applicative
    : 
      [ run applicative/applicative_std_optional_pass.cpp  ]
      [ run applicative/applicative_std_expected_pass.cpp  ]
      #[ run applicative/applicative_std_tuple_pass.cpp  ]
      [ run applicative/applicative_std_array_pass.cpp  ]
    ;

test-suite n_applicative
    : 
      [ run n_applicative/n_applicative_std_tuple_pass.cpp  ]
    ;

test-suite p_applicative
    : 
      [ run p_applicative/p_applicative_std_tuple_pass.cpp  ]
    ;

test-suite monad
    : 
      [ run monad/monad_std_optional_pass.cpp  ]
      [ run monad/monad_std_expected_pass.cpp  ]
    ;

test-suite monad_error
    : 
      [ run monad_error/monad_error_std_expected_pass.cpp  ]
      [ run monad_error/monad_error_std_optional_pass.cpp  ]
      #[ run monad_error/monad_error_std_unique_ptr_pass.cpp  ]
    ;

test-suite frames
    : 
      [ run ../example/chrono/frame_types_pass.cpp  ]
      [ run ../example/chrono/day_types_pass.cpp  ]
    ;

test-suite mem_usage
    : 
      [ run ../example/cust_paper/mem_usage/traits/traits_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/overload_adl/overload_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/fo_overload_adl/fo_test_pass.cpp  ]
      [ run ../example/cust_paper/mem_usage/concept_overload_adl/concept_overload_test_pass.cpp  ]
    ;

test-suite std_mem_usage
    : 
      [ run ../example/cust_paper/std_mem_usage/traits/std_traits_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/fo_overload_adl/std_fo_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/concept_fo_overload_adl/std_concept_fo_test_pass.cpp  ]
      [ run ../example/cust_paper/std_mem_usage/concept_overload_adl/std_concept_overload_test_pass.cpp  ]
    ;

test-suite serializable
    : 
      [ run ../example/cust_paper/serializable/n4381/serial_test_pass.cpp  ]
    ; 

test-suite optionals
    : 
      [ run optionals/optionals_pass.cpp  ]
    ;


test-suite pod
    : 
      [ run pod/optional/optional_pass.cpp  ]
      [ run pod/optionals/pod_optionals_pass.cpp  ]
    ;

test-suite scoped
    : 
      [ run scoped/scope_pass.cpp  ]
    ;

test-suite compare
    : 
      [ run compare/compare_pass.cpp  ]
    ;

test-suite strong
    : 
      [ run strong/byte_pass.cpp  ]
      [ run strong/strong_enums_pass.cpp  ]
      [ run strong/safe_bool_pass.cpp  ]
      [ run strong/strong_bool_pass.cpp  ]
      [ run strong/strict_bool_pass.cpp  ]
      [ run strong/strong_ints_pass.cpp  ]
      [ run strong/strong_bounded_int_pass.cpp  ]
      [ run strong/strong_counter_pass.cpp  ]
      [ run strong/strong_id_pass.cpp  ]
      [ run ../example/strong/duration_pass.cpp  ]
      [ run ../example/strong/address_offset_pass.cpp  ]
    ;

test-suite utility
    : 
      [ run utility/lvalue_ref_pass.cpp  ]
      [ run utility/out_param_pass.cpp  ]
      [ run utility/only_when_pass.cpp  ]
      [ run utility/not_null_pass.cpp  ]
      [ run utility/narrow_pass.cpp  ]
    ;



test-suite numbers
    : 
      [ run numerics/numbers/double_wide_types_pass.cpp  ]
      [ run numerics/numbers/double_wide_arithmetic_pass.cpp  ]
      [ run numerics/numbers/overflow_detection_arithmetic_pass.cpp  ]

    ;
test-suite numerics
    : 
      [ run numerics/charconv_pass.cpp  ]

    ;

test-suite money_ts
    : 
      [ run ../example/strong/money.cpp  ]
      [ run ../example/strong/strong_money.cpp  ]
      [ run ../example/strong/money3.cpp  ]

    ;


test-suite non_zero_integer
    : 
      [ run ../example/strong/non_zero_integer/flat_non_zero_integer.cpp  ]
    ;

explicit fix ;
test-suite fix
    : 
      [ run make/pair_pass.cpp  ]
    ;
